var app=angular.module("trikatuka2",["ngRoute","ngResource","btford.socket-io","ngStorage"]);angular.module("trikatuka2").config(function($routeProvider){$routeProvider.when("/",{controller:"MainCtrl as  mainVM",templateUrl:"partials/main.html"}).when("/help",{controller:"HelpCtrl",templateUrl:"partials/help.html"}).otherwise({redirectTo:"/"})}),angular.module("trikatuka2").run(function($sessionStorage,users,User){users.user1=new User("user1",$sessionStorage.user1),users.user2=new User("user2",$sessionStorage.user2)}),angular.module("trikatuka2").controller("AlbumListCtrl",function($scope,$resource,users,Spotify,Pagination,Checkboxes,AlbumService,Album,$rootScope,$q,RequestHelper){var pagination=$scope.pagination=new Pagination;function load(){var params;(params=pagination.getParams(),AlbumService.loadAlbums(users.user1,params,transformer)).then(function(albums){$scope.items=albums.items,pagination.updateTotal(albums.total)})}function transformer(item){return new Album(item.album,users.user1)}pagination.setChangeCallback(load),$scope.transferAll=function(){confirm("Are you sure you want to transfer all albums?")&&($rootScope.$broadcast("DISABLE_VIEW"),AlbumService.transferAll(users.user1,users.user2).then(function(){alert("Transfering albums done.\n\nYou may need to login again to your Spotify client to see the results."),$rootScope.$broadcast("ENABLE_VIEW")}))},users.user1.authData&&load(),$scope.$on("USER_LOGGED_IN",function(event,user){"user1"===user.id&&load()}),$scope.$on("USER_LOGGED_OUT",function(event,user){"user1"===user.id&&($scope.items=null,pagination.updateTotal(0))})}),angular.module("trikatuka2").controller("ArtistListCtrl",function($scope,$resource,users,Spotify,Pagination,Checkboxes,ArtistService,Artist,$rootScope,$q,RequestHelper){var pagination=$scope.pagination=new Pagination;function load(){var params;(params=pagination.getParams(),ArtistService.loadArtists(users.user1,params,transformer)).then(function(artists){$scope.items=artists.items,pagination.updateTotal(artists.total)})}function transformer(item){return new Artist(item,users.user1)}pagination.setChangeCallback(load),$scope.transferAll=function(){confirm("Are you sure you want to transfer all artists?")&&($rootScope.$broadcast("DISABLE_VIEW"),ArtistService.transferAll(users.user1,users.user2).then(function(){alert("Transfering artists done.\n\nYou may need to login again to your Spotify client to see the results."),$rootScope.$broadcast("ENABLE_VIEW")}))},users.user1.authData&&load(),$scope.$on("USER_LOGGED_IN",function(event,user){"user1"===user.id&&load()}),$scope.$on("USER_LOGGED_OUT",function(event,user){"user1"===user.id&&($scope.items=null,pagination.updateTotal(0))})}),angular.module("trikatuka2").controller("LoginCtrl",function($scope,users){$scope.user1=users.user1,$scope.user2=users.user2,$scope.$on("DISABLE_VIEW",function(){$scope.viewDisabled=!0}),$scope.$on("ENABLE_VIEW",function(){$scope.viewDisabled=!1})}),angular.module("trikatuka2").controller("MainCtrl",function($scope,users){var self=this;self.viewDisabled=!1,self.user1=users.user1,self.user2=users.user2,$scope.$on("DISABLE_VIEW",function(){self.viewDisabled=!0}),$scope.$on("ENABLE_VIEW",function(){self.viewDisabled=!1})}),angular.module("trikatuka2").controller("PlaylistListCtrl",function($scope,$resource,users,Spotify,Pagination,Checkboxes,PlaylistService,Playlist,$rootScope,$q,RequestHelper){var pagination=$scope.pagination=new Pagination;pagination.setChangeCallback(load);var checkboxes=$scope.checkboxes=new Checkboxes;function loadPlaylists(params){return PlaylistService.loadPlaylists(users.user1,params,transformer)}function load(){loadPlaylists(pagination.getParams()).then(function(playlists){checkboxes.pageSwitch(),$scope.items=playlists.items,pagination.updateTotal(playlists.total)})}function transformer(item){return new Playlist(item,users.user1)}function transfer(items){$rootScope.$broadcast("DISABLE_VIEW"),RequestHelper.doAction("transfer",items,[users.user2]).then(function(result){var successNames=_.map(result.success,function(item){return item.playlist.name}),failedNames=_.map(result.fail,function(item){return item.playlist.name});$rootScope.$broadcast("ENABLE_VIEW"),checkboxes.clearCache();var msg="";successNames.length&&(msg+=sprintf("Successfully transfered playlist(s):\n%s\n\n",successNames.join(",\n"))),failedNames.length&&(msg+=sprintf("Failed to transfer playlist(s):\n%s",failedNames.join(",\n"))),msg+="\nYou may need to login again to your Spotify client to see the results.",alert(msg)})}load(),$scope.transferAll=function(){if(confirm("Are you sure you want to transfer all playlists?")){for(var playlists=[],collectingPlaylistsPromises=[],pages=Math.ceil(pagination.total/50),i=0;i<pages;i++)collectingPlaylistsPromises.push(loadPlaylists({limit:50,offset:50*i}).then(function(result){playlists=playlists.concat(result.items)}));$q.all(collectingPlaylistsPromises).then(function(){transfer(playlists)})}},$scope.transferSelected=function(){confirm("Are you sure you want to transfer selected playlists?")&&transfer(_.toArray(checkboxes.cache))},users.user1.authData&&load(),$scope.$on("USER_LOGGED_IN",function(event,user){"user1"===user.id&&load()}),$scope.$on("USER_LOGGED_OUT",function(event,user){"user1"===user.id&&($scope.items=null,pagination.updateTotal(0),checkboxes.clearCache(),checkboxes.removeCheckboxes())}),$scope.$on("DISABLE_VIEW",function(){$scope.viewDisabled=!0}),$scope.$on("ENABLE_VIEW",function(){$scope.viewDisabled=!1})}),angular.module("trikatuka2").controller("TrackListCtrl",function($scope,$resource,users,Spotify,Pagination,TrackService,Track,$rootScope,$q){var pagination=$scope.pagination=new Pagination;function load(){var params;(params=pagination.getParams(),TrackService.loadTracks(users.user1,params,transformer)).then(function(playlists){$scope.items=playlists.items,pagination.updateTotal(playlists.total)})}function transformer(item){return new Track(item.track,users.user1)}pagination.setChangeCallback(load),$scope.transferAll=function(){confirm("Are you sure you want to transfer all tracks?")&&($rootScope.$broadcast("DISABLE_VIEW"),TrackService.transferAll(users.user1,users.user2).then(function(){alert("Transfering tracks done.\n\nYou may need to login again to your Spotify client to see the results."),$rootScope.$broadcast("ENABLE_VIEW")}))},users.user1.authData&&load(),$scope.$on("USER_LOGGED_IN",function(event,user){"user1"===user.id&&load()}),$scope.$on("USER_LOGGED_OUT",function(event,user){"user1"===user.id&&($scope.items=null,pagination.updateTotal(0))})}),angular.module("trikatuka2").directive("checkbox",function(){return{restrict:"E",scope:{checkboxes:"=",uid:"=",model:"="},template:'<input type="checkbox" ng-model="checked" ng-change="changed()" ng-disabled="viewDisabled"/>',replace:!0,link:function(scope,elem,attrs){function changed(){scope.checked?scope.checkboxes.check(scope.uid,scope.model):scope.checkboxes.uncheck(scope.uid)}scope.checkboxes.add({id:scope.uid,check:function(){scope.checked=!0,changed()},uncheck:function(){scope.checked=!1,changed()}}),scope.changed=changed,scope.$on("DISABLE_VIEW",function(){scope.viewDisabled=!0}),scope.$on("ENABLE_VIEW",function(){scope.viewDisabled=!1})}}}),angular.module("trikatuka2").directive("owner",function($http){return{require:"ngModel",template:"<span>{{owner.display_name || owner.id}}</span>",replace:!0,scope:{},link:function(scope,elem,attrs,ngModel){ngModel.$render=function(){$http.get(ngModel.$modelValue.href).then(function(response){scope.owner=response.data})}}}}),angular.module("trikatuka2").factory("Album",function(Spotify,$q,AlbumService){return this.playlistId=null,this.name=null,function(album,user){this.id=album.id,this.name=album.name,this.artists=album.artists,this.trackcounts=album.tracks.total,this.user=user}}),angular.module("trikatuka2").factory("Artist",function(Spotify,$q,ArtistService){return this.playlistId=null,this.name=null,function(artist,user){this.id=artist.id,this.name=artist.name,this.user=user}}),angular.module("trikatuka2").factory("Checkboxes",function(){function Checkboxes(cache){this.cache=cache||{},this.checkboxes={}}function uncheckAll(pagination){_.each(pagination.checkboxes,function(checkbox){checkbox.uncheck()})}return Checkboxes.prototype.removeCheckboxes=function(){this.checkboxes={}},Checkboxes.prototype.clearCache=function(){this.cache={},uncheckAll(this),this.selectAll=!1},Checkboxes.prototype.add=function(obj){this.checkboxes[obj.id]=obj,this.cache[obj.id]&&obj.check()},Checkboxes.prototype.check=function(id,value){this.cache[id]=value},Checkboxes.prototype.uncheck=function(id){delete this.cache[id]},Checkboxes.prototype.getSize=function(){return _.size(this.cache)},Checkboxes.prototype.toggleCheck=function(){var pagination;this.selectAll?(pagination=this,_.each(pagination.checkboxes,function(checkbox){checkbox.check()})):uncheckAll(this)},Checkboxes.prototype.pageSwitch=function(){this.removeCheckboxes(),this.selectAll=!1},Checkboxes}),angular.module("trikatuka2").factory("mySocket",function(socketFactory){return socketFactory()}),angular.module("trikatuka2").factory("Pagination",function(){function Pagination(){this.limit=10,this.offset=0,this.total=0,this.pages=0,this.currentPage=0}function pageChanged(pagination){checkDisabled(pagination),pagination.changeCallback&&pagination.changeCallback(pagination.getParams())}function checkDisabled(pagination){0===pagination.total&&(pagination.nextDisabled=!0,pagination.prevDisabled=!0),pagination.pages=Math.ceil(pagination.total/pagination.limit),pagination.currentPage=Math.floor(pagination.offset/pagination.limit)+1,pagination.offset-pagination.limit<0?pagination.prevDisabled=!0:pagination.prevDisabled=!1,pagination.offset+pagination.limit>=pagination.total?pagination.nextDisabled=!0:pagination.nextDisabled=!1}return Pagination.prototype.updateTotal=function(total){this.total=total,checkDisabled(this)},Pagination.prototype.getParams=function(){return{limit:this.limit,offset:this.offset}},Pagination.prototype.nextPage=function(){this.offset+this.limit<this.total&&(this.offset+=this.limit,pageChanged(this))},Pagination.prototype.prevPage=function(){this.offset-this.limit>=0&&(this.offset-=this.limit,pageChanged(this))},Pagination.prototype.setChangeCallback=function(callback){this.changeCallback=callback},Pagination}),angular.module("trikatuka2").factory("Playlist",function(Spotify,$q,PlaylistService,$timeout){function Playlist(playlist,user){this.id=playlist.id,this.name=playlist.name,this.collaborative=playlist.collaborative,this.isPublic=playlist.public,this.owner=playlist.owner,this.tracksCount=playlist.tracks.total,this.user=user}return this.playlistId=null,this.tracksCount=null,this.name=null,this.collaborative=null,Playlist.prototype.transfer=function(targetUser){return this.collaborative||this.owner.id!==this.user.getUserId()?this.followCollaborative(targetUser):this.copyPlaylist(targetUser)},Playlist.prototype.followCollaborative=function(targetUser){var self=this,data={public:this.isPublic},url=sprintf("https://api.spotify.com/v1/users/%s/playlists/%s/followers",this.owner.id,this.id);return Spotify.put(url,targetUser,data).then(function(){return{success:!0,playlist:self}},function(){return{success:!1,playlist:self}})},Playlist.prototype.copyPlaylist=function(targetUser){var self=this;return this.loadTracks().then(function(tracks){return PlaylistService.createPlaylist(targetUser,self.name,self.isPublic).then(function(playlistResponse){var newPlaylistId=playlistResponse.data.id;return PlaylistService.addTracksToPlaylist(tracks,targetUser,newPlaylistId).then(function(){return{success:!0,playlist:self}})})},function(){return{success:!1,playlist:self}})},Playlist.prototype.loadTracks=function(){var self=this;for(var params,url,total=this.tracksCount,pages=Math.ceil(total/100),promises=[],i=0;i<pages;i++)promises.push((params={offset:100*i,limit:100},void 0,url=sprintf("https://api.spotify.com/v1/users/%s/playlists/%s/tracks",self.user.getUserId(),self.id),Spotify.get(url,self.user,params)));return $q.all(promises).then(function(results){var tracks=[];return _.each(results,function(result){tracks=tracks.concat(result.data.items)}),tracks})},Playlist}),angular.module("trikatuka2").factory("Track",function(Spotify,$q,TrackService){return this.playlistId=null,this.tracksCount=null,this.name=null,this.collaborative=null,function(track,user){this.id=track.id,this.name=track.name,this.artists=track.artists,this.album=track.album,this.user=user}}),angular.module("trikatuka2").factory("User",function(mySocket,Spotify,$sessionStorage,$rootScope,$http,$q){function User(id,authData){this.authData=authData,this.data=null,this.id=id,authData&&!authData.error&&this.fetchData()}return User.prototype.login=function(){var self=this,signingProccessId=function(){function s4(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}return s4()+s4()+ +s4()+s4()+ +s4()+ +s4()+s4()+s4()}().toString();mySocket.on("user_logged_in",function(data){signingProccessId===data.signingProccessId&&(self.authData=data,self.authData.expiresAt=(new Date).getTime()+1e3*self.authData.expires_in,self.fetchData().then(function(){$sessionStorage[self.id]=self.authData,self.loggedIn=!0,$rootScope.$broadcast("USER_LOGGED_IN",self)}))});var wnd=window.open("","","width=800, height=600, scrollbars=yes");mySocket.emit("login",signingProccessId,function(url){wnd.location.href=url})},User.prototype.fetchData=function(){var self=this;return Spotify.get("https://api.spotify.com/v1/me",self).then(function(response){self.data=response.data})},User.prototype.logout=function(){delete $sessionStorage[this.id],this.authData=null,this.data=null,$rootScope.$broadcast("USER_LOGGED_OUT",this)},User.prototype.getAccessToken=function(){return this.authData.access_token},User.prototype.getUserId=function(){return this.data.id},User.prototype.refreshToken=function(){var self=this,deferred=$q.defer();return mySocket.emit("refreshToken",self.authData.refresh_token,function(response){self.authData=response,self.authData.expiresAt=(new Date).getTime()+1e3*self.authData.expires_in,$sessionStorage[self.id]=self.authData,deferred.resolve(self)}),deferred.promise},User}),angular.module("trikatuka2").service("AlbumService",function(Spotify,$q,RequestHelper,$timeout){this.loadAlbums=function(user,params,itemsTransformer){return Spotify.get("https://api.spotify.com/v1/me/albums",user,params).then(function(response){return{items:itemsTransformer?_.map(response.data.items,itemsTransformer):response.data.items,total:response.data.total}})},this.transferAll=function(user,targetUser){var deferred=$q.defer(),url="https://api.spotify.com/v1/me/albums";function Page(items){this.items=items,this.transfer=function(){return Spotify.put(url,targetUser,this.items)}}return function(user){var deferred=$q.defer(),url="https://api.spotify.com/v1/me/albums";return Spotify.get(url,user,{limit:1,offset:0}).then(function(response){var total=response.data.total,albums=[];function Page(params){this.getItems=function(){return function(url,user,params){return Spotify.get(url,user,params).then(function(response){return items=response.data.items,_.map(items,function(item){return item.album.id});var items})}(url,user,params)}}for(var pages=Math.ceil(total/50),pagesToLoad=[],i=0;i<pages;i++){var params={limit:50,offset:50*i};pagesToLoad.push(new Page(params))}return RequestHelper.doAction("getItems",pagesToLoad).then(function(result){_.each(result.success,function(items){albums=albums.concat(items)}),deferred.resolve(albums)})}),deferred.promise}(user).then(function(albums){for(var pages=Math.ceil(albums.length/50),toTransfer=[],i=0;i<pages;i++){var data=albums.slice(50*i,50*i+50);toTransfer.push(new Page(data))}return RequestHelper.doAction("transfer",toTransfer).then(function(){deferred.resolve()})}),deferred.promise}}),angular.module("trikatuka2").service("ArtistService",function(Spotify,$q,RequestHelper,$timeout){this.loadArtists=function(user,params,itemsTransformer){return Spotify.get("https://api.spotify.com/v1/me/following?type=artist",user,params).then(function(response){return{items:itemsTransformer?_.map(response.data.artists.items,itemsTransformer):response.data.artists.items,total:response.data.artists.total}})},this.transferAll=function(user,targetUser){var deferred=$q.defer(),url="https://api.spotify.com/v1/me/following?type=artist";function Page(items){this.items=items,this.transfer=function(){return Spotify.put(url,targetUser,this.items)}}return function(user){var deferred=$q.defer(),url="https://api.spotify.com/v1/me/following?type=artist";return Spotify.get(url,user,{limit:1,offset:0}).then(function(response){var total=response.data.artists.total,artists=[];function Page(params){this.getItems=function(){return function(url,user,params){return Spotify.get(url,user,params).then(function(response){return items=response.data.artists.items,_.map(items,function(item){return item.id});var items})}(url,user,params)}}for(var pages=Math.ceil(total/50),pagesToLoad=[],i=0;i<pages;i++){var params={limit:50,offset:50*i};pagesToLoad.push(new Page(params))}return RequestHelper.doAction("getItems",pagesToLoad).then(function(result){_.each(result.success,function(items){artists=artists.concat(items)}),deferred.resolve(artists)})}),deferred.promise}(user).then(function(artists){for(var pages=Math.ceil(artists.length/50),toTransfer=[],i=0;i<pages;i++){var data=artists.slice(50*i,50*i+50);toTransfer.push(new Page(data))}return RequestHelper.doAction("transfer",toTransfer).then(function(){deferred.resolve()})}),deferred.promise}}),angular.module("trikatuka2").service("PlaylistService",function(Spotify,$q,RequestHelper){this.loadPlaylists=function(user,params,itemsTransformer){return Spotify.get("https://api.spotify.com/v1/me/playlists",user,params).then(function(response){return{items:itemsTransformer?_.map(response.data.items,itemsTransformer):response.data.items,total:response.data.total}})},this.createPlaylist=function(user,name,isPublic){var data={name:name,public:isPublic||!1},url=sprintf("https://api.spotify.com/v1/users/%s/playlists",user.getUserId());return Spotify.post(url,user,data)},this.addTracksToPlaylist=function(tracks,user,playlistId){var pages=Math.ceil(tracks.length/100);function Page(data){this.add=function(){return Spotify.post(url,user,data)}}for(var url=sprintf("https://api.spotify.com/v1/users/%s/playlists/%s/tracks",user.getUserId(),playlistId),promises=[],i=0;i<pages;i++){var data={uris:_.map(tracks.slice(100*i,100*i+100),function(item){return item.track.uri})};promises.push(new Page(data))}return RequestHelper.doAction("add",promises)}}),angular.module("trikatuka2").service("RequestHelper",function($q){this.doAction=function(actionName,items,args){var deferred=$q.defer(),ret={success:[],fail:[]},process=function(index){if(items[index])return items[index][actionName].apply(items[index],args).then(function(result){ret.success.push(result)},function(result){ret.fail.push(result)}).finally(function(){return process(index+1)});deferred.resolve(ret)};return process(0),deferred.promise}}),angular.module("trikatuka2").service("Spotify",function($http,$q){function beforeRequest(user){var deferred=$q.defer();return user.authData&&!user.authData.error&&user.authData.expiresAt<=(new Date).getTime()?user.refreshToken().then(function(refreshedUser){deferred.resolve(refreshedUser)}):user.authData&&user.authData.error?(user.logout(),deferred.reject()):user.authData&&!user.authData.error?deferred.resolve(user):deferred.reject(),deferred.promise}function buildHeaders(user){return{Authorization:"Bearer "+user.getAccessToken(),Accept:"application/json","Content-type":"application/json"}}this.get=function(url,user,params){return beforeRequest(user).then(function(usr){return $http({url:url,method:"GET",headers:buildHeaders(usr),params:params})})},this.post=function(url,user,data){return beforeRequest(user).then(function(usr){return $http({url:url,method:"POST",headers:buildHeaders(usr),data:data})})},this.put=function(url,user,data){return beforeRequest(user).then(function(usr){return $http({url:url,method:"PUT",headers:buildHeaders(usr),data:data})})}}),angular.module("trikatuka2").service("TrackService",function(Spotify,$q,RequestHelper,$timeout){this.loadTracks=function(user,params,itemsTransformer){return Spotify.get("https://api.spotify.com/v1/me/tracks",user,params).then(function(response){return{items:itemsTransformer?_.map(response.data.items,itemsTransformer):response.data.items,total:response.data.total}})},this.transferAll=function(user,targetUser){var deferred=$q.defer(),url="https://api.spotify.com/v1/me/tracks";function Page(items){this.items=items,this.transfer=function(){return Spotify.put(url,targetUser,this.items)}}return function(user){var deferred=$q.defer(),url="https://api.spotify.com/v1/me/tracks";return Spotify.get(url,user,{limit:1,offset:0}).then(function(response){var total=response.data.total,tracks=[];function Page(params){this.getItems=function(){return function(url,user,params){return Spotify.get(url,user,params).then(function(response){return items=response.data.items,_.map(items,function(item){return item.track.id});var items})}(url,user,params)}}for(var pages=Math.ceil(total/50),pagesToLoad=[],i=0;i<pages;i++){var params={limit:50,offset:50*i};pagesToLoad.push(new Page(params))}return RequestHelper.doAction("getItems",pagesToLoad).then(function(result){_.each(result.success,function(items){tracks=tracks.concat(items)}),deferred.resolve(tracks)})}),deferred.promise}(user).then(function(tracks){for(var pages=Math.ceil(tracks.length/50),toTransfer=[],i=0;i<pages;i++){var data=tracks.slice(50*i,50*i+50);toTransfer.push(new Page(data))}return RequestHelper.doAction("transfer",toTransfer).then(function(){deferred.resolve()})}),deferred.promise}}),angular.module("trikatuka2").service("users",function(User){this.user1=null,this.user2=null});